<!-- #region Apache License -->
@*
    Copyright 2015 StrixIT. Author R.G. Schurgers MA MSc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@
<!-- #endregion -->

@model ListConfiguration
@{
    var typeName = Model.TypeName;

    bool hasImage = Model.DtoType.HasAttribute(typeof(ImageAttribute), true);
    var imageName = hasImage ? (Model.DtoType.GetProperties().First(p => p.GetAttribute<ImageAttribute>() != null).Name + "Path").ToCamelCase() : null;
    string confirmMessage = ResourceHelper.GetResource(Model.InterfaceResourceType, string.Format("ConfirmDelete{0}", Model.DtoType.Name)) ?? DefaultInterface.ConfirmDeleteItem;
    string deletedMessage = ResourceHelper.GetResource(Model.InterfaceResourceType, string.Format("{0}Deleted", Model.DtoType.Name)) ?? DefaultInterface.ItemDeleted;
    string deleteErrorMessage = ResourceHelper.GetResource(Model.InterfaceResourceType, string.Format("ErrorDeleting{0}", Model.DtoType.Name)) ?? DefaultInterface.ErrorDeletingItem;
    string create = ResourceHelper.GetResource(Model.InterfaceResourceType, string.Format("Create{0}", typeName)) ?? string.Format(DefaultInterface.Create, typeName);
    string name = ResourceHelper.GetResource(Model.InterfaceResourceType, "Name") ?? DefaultInterface.Name;
    string nameProperty = Model.DtoType.HasProperty("Name") ? "name" : "id";
    string idProperty = Model.DtoType.HasProperty("Url") ? "url" : "id";

}
@RenderSection("css", false)
@RenderSection("JavaScript", false)
<script type="text/x-kendo-angular-template" id="@(typeName + "stemplate")">
    <tr>
        @if (hasImage)
        {
            <td>
                <a class="imagelink" ng-href="{{ '@((Url.AdminLink(MvcConstants.DETAILS, typeName) + "/").Replace("//", "/"))' + dataItem['@idProperty'] }}">
                    <img class="entityfile" ng-show="{{ hasImage(dataItem, '@imageName') }}" ng-src="{{ getImage(dataItem, '@imageName') }}" title="{{ getName(dataItem) }}" alt="{{ getName(dataItem) }}" />
                    <div class="fileicon" ng-show="{{ !hasImage(dataItem, '@imageName') }}"><i ng-class="'{{ getIcon(dataItem, '@imageName') }}'"></i></div>
                </a>
            </td>
        }
        @if (!Model.HideNameColumn)
        {
            <td>
                <a ng-href="{{ '@((Url.AdminLink(MvcConstants.DETAILS, typeName) + "/").Replace("//", "/"))' + dataItem['@idProperty'] }}" ng-bind-html="dataItem['@nameProperty']"></a>
            </td>
        }
        @foreach (var field in Model.Fields)
        {

            var fieldName = field.Name.Substring(0, 1).ToLower() + field.Name.Substring(1);

            <td>
                @if (field.FilterName == "bool")
                {
                    <input type="checkbox" ng-checked="{{ getValue(null, '@fieldName', dataItem) == true }}" disabled="disabled" />
                }
                else
                {
                    if (field.DisplayHtml)
                    {
                        <span ng-bind-html="getValue('@field.FilterName', '@fieldName', dataItem)"></span>
                    }
                    else
                    {
                        @: {{ getValue('@field.FilterName', '@fieldName', dataItem) }}
                    }
                }
            </td>
        }
        }
        @if (Model.HideNameColumn)
        {
            <td>
                <a ng-href="{{ '@((Url.AdminLink("Details", typeName) + "/").Replace("//", "/"))' + dataItem['@idProperty'] }}">@DefaultInterface.Details</a>
            </td>
        }
        @if (Model.CanEdit)
        {
            <td class="button-cell">
                <a class="pull-right" ng-href="{{ '@((Url.AdminLink("Edit", typeName) + "/").Replace("//", "/"))' + dataItem['@idProperty'] }}">@DefaultInterface.Edit</a>
            </td>
        }
        @if (Model.CanDelete)
        {
            <td class="button-cell">
                <kendo-button class="pull-right" ng-click="delete(dataItem)">@DefaultInterface.Delete</kendo-button>
            </td>
        }
    </tr>
</script>
@RenderSection("Navigation", false)
@if (Model.CanCreate)
{
    <a href="@Url.AdminLink("Edit")" class="k-button pull-right">@create</a>
}
<h1>@RenderSection("Title", true)</h1>
<div id="@(typeName + "-content")" ng-controller="listcontroller">
    <div class="table-responsive">
        <div kendo-pager k-options="pagerOptions" k-data-source="@string.Format("{0}s", typeName)"></div>
        <table id="@(typeName + "table")" class="table table-striped table-hover strix-cms-list-table" ng-cloak>
            <thead strix-search k-data-source="@string.Format("{0}s", typeName)">
                <tr class="sort">
                    @if (hasImage)
                    {
                        <th></th>
                    }
                    @if (!Model.HideNameColumn)
                    {
                        <th data-field="Name">
                            <span>
                                @name
                            </span>
                            <i class="fa fa-caret-left"></i>
                        </th>
                    }
                    @foreach (var field in Model.Fields)
                    {
                        <th data-field="@field.Name">
                            <span>
                                @(ResourceHelper.GetResource(Model.InterfaceResourceType, field.Name) ?? ResourceHelper.GetResource(typeof(DefaultInterface), field.Name))
                            </span>
                            <i class="fa fa-caret-left"></i>
                        </th>
                    }
                    @if (Model.HideNameColumn)
                    {
                        <th></th>
                    }
                    @if (Model.CanEdit)
                    {
                        <th></th>
                    }
                    @if (Model.CanDelete)
                    {
                        <th></th>
                    }
                </tr>
                <tr class="filter">
                    @if (hasImage)
                    {
                        <th></th>
                    }
                    @if (!Model.HideNameColumn)
                    {
                        <th>
                            <input type="text" data-field="Name" data-operator="Contains" class="k-textbox" />
                        </th>
                    }
                    @foreach (var field in Model.Fields)
                    {
                        <th>
                            @if (field.ShowFilter)
                            {
                                <input data-field="@field.Name" data-operator="@field.Operator" class="k-textbox" />
                            }
                        </th>
                    }
                    @if (Model.HideNameColumn)
                    {
                        <th></th>
                    }
                    @if (Model.CanEdit)
                    {
                        <th></th>
                    }
                    @if (Model.CanDelete)
                    {
                        <th></th>
                    }
                </tr>
            </thead>
            <tbody kendo-listview id="@(typeName + "list")" k-data-source="@(typeName + "s")" k-template="@(typeName + "stemplate")"></tbody>
        </table>
        <div kendo-pager k-options="pagerOptions" k-data-source="@string.Format("{0}s", typeName)"></div>
    </div>
    @Html.Partial("ConfirmationModal", new ConfirmationConfig { Id = "confirmdelete", Body = confirmMessage })
</div>