//------------------------------------------------------------------------------
// <auto-generated>
//     This code was not generated by a tool. but for stylecop suppression.
// </auto-generated>
//------------------------------------------------------------------------------
using Newtonsoft.Json;
using StrixIT.Platform.Core;
using System;
using System.Collections.Generic;
using System.Linq;

namespace StrixIT.Platform.Modules.Membership.Tests
{
    public static class MembershipTestData
    {
        #region Ids

        public static Guid AdminId
        {
            get
            {
                return Guid.Parse("2EE85938-0E93-4936-B4FE-1B18BD6DFF32");
            }
        }

        public static string AdminName
        {
            get
            {
                return "Administrator";
            }
        }

        public static Guid AdminRoleId
        {
            get
            {
                return Guid.Parse("422C00C1-2B3C-478F-A7F1-4BFE140AB78A");
            }
        }

        public static string AdminRoleName
        {
            get
            {
                return PlatformConstants.ADMINROLE;
            }
        }

        public static Guid AppId
        {
            get
            {
                return Guid.Parse("CB8191C4-8721-4E0D-AC6C-A8E1223B71B2");
            }
        }

        public static Guid CreateUserPermissionId
        {
            get
            {
                return Guid.Parse("AAF39D86-4AAF-434B-A89E-17E10DD22571");
            }
        }

        public static Guid DivingCustomRoleId
        {
            get
            {
                return Guid.Parse("D69E2AEC-7519-4237-B2A0-DA8F44B300CE");
            }
        }

        public static Guid DivingEditorId
        {
            get
            {
                return Guid.Parse("DF54143F-8A89-4CA9-9B28-4E1C665D24A4");
            }
        }

        public static Guid DivingGroupId
        {
            get
            {
                return Guid.Parse("BE65198E-C609-4D90-BBB3-805BE0B6B1C2");
            }
        }

        public static Guid DivingManagerId
        {
            get
            {
                return Guid.Parse("8ECBB4D4-59D6-4EDD-BEEF-420FF988CA4A");
            }
        }

        public static Guid DivingPermissionSetRoleId
        {
            get
            {
                return Guid.Parse("7FD0DA8F-A5A3-40B0-9FC5-82D757B99A07");
            }
        }

        public static Guid EditorRoleId
        {
            get
            {
                return Guid.Parse("5FC40864-05CB-4845-A610-62026C5F6CF2");
            }
        }

        public static string EditorRoleName
        {
            get
            {
                return "Editor";
            }
        }

        public static Guid EditPermissionId
        {
            get
            {
                return Guid.Parse("5B60F7F9-E4D6-4E6D-B63D-2CC4BB712264");
            }
        }

        public static Guid EmptyGroupId
        {
            get
            {
                return Guid.Parse("FD08B962-1F1B-4ACF-B622-93437F3B9AFF");
            }
        }

        public static Guid ErrorLogPermissionId
        {
            get
            {
                return Guid.Parse("6A667D42-1861-4A12-8E29-18FEB8F5519E");
            }
        }

        public static Guid GeneralManagerId
        {
            get
            {
                return Guid.Parse("78EE8D91-C51D-40DB-9762-01DD25844C14");
            }
        }

        public static Guid GroupAdminRoleId
        {
            get
            {
                return Guid.Parse("A31BD764-7739-4FBC-AAFE-5047429913F2");
            }
        }

        public static string GroupAdminRoleName
        {
            get
            {
                return PlatformConstants.GROUPADMINROLE;
            }
        }

        public static Guid KarateEditorId
        {
            get
            {
                return Guid.Parse("B3D68526-BC16-4705-9607-7EA8404788B9");
            }
        }

        public static Guid KarateGroupId
        {
            get
            {
                return Guid.Parse("D632CA83-A3F3-4925-B5B8-8A21D64F3CD7");
            }
        }

        public static Guid KarateManagerId
        {
            get
            {
                return Guid.Parse("CADC6B43-3C36-4087-B4FC-49353658BBC4");
            }
        }

        public static Guid MainGroupId
        {
            get
            {
                return Guid.Parse("0FCFB844-3077-4DE2-ABB1-2D8AFB035B46");
            }
        }

        public static Guid OtherAppId
        {
            get
            {
                return Guid.Parse("249B080E-4239-4212-BF6A-4813E5508999");
            }
        }

        public static Guid OtherAppPermissionId
        {
            get
            {
                return Guid.Parse("91A03C68-E353-44E2-A46C-3CC0AF6EC6A5");
            }
        }

        public static Guid OtherAppRoleId
        {
            get
            {
                return Guid.Parse("9D746419-6C1E-402D-AB32-825E5AD1003C");
            }
        }

        public static string OtherAppRoleName
        {
            get
            {
                return "OtherAppRole";
            }
        }

        public static Guid UserPermissionId
        {
            get
            {
                return Guid.Parse("FAFE59CF-E2E0-4B05-831B-0692955D9890");
            }
        }

        public static Guid UserRoleId
        {
            get
            {
                return Guid.Parse("C168CBC4-B96B-43E2-B46B-9BF1AFD4AD00");
            }
        }

        public static string UserRoleName
        {
            get
            {
                return "User";
            }
        }

        #endregion Ids

        #region Applications

        internal static Application Application
        {
            get
            {
                return new Application(MembershipTestData.AppId, "StrixIT Membership Tests");
            }
        }

        internal static Application OtherApplication
        {
            get
            {
                return new Application(MembershipTestData.OtherAppId, "Other App");
            }
        }

        #endregion Applications

        #region Permissions

        public static Permission CreateUserPermission
        {
            get
            {
                return new Permission(CreateUserPermissionId, AppId, "Create users");
            }
        }

        public static Permission EditPermission
        {
            get
            {
                return new Permission(EditPermissionId, AppId, "Edit");
            }
        }

        public static Permission ErrorLogPermission
        {
            get
            {
                return new Permission(ErrorLogPermissionId, AppId, "View error log");
            }
        }

        public static Permission OtherAppPermission
        {
            get
            {
                return new Permission(OtherAppPermissionId, OtherAppId, "Other App");
            }
        }

        public static List<Permission> Permissions
        {
            get
            {
                return new List<Permission> { ErrorLogPermission, CreateUserPermission, EditPermission, UserPermission, OtherAppPermission };
            }
        }

        public static Permission UserPermission
        {
            get
            {
                return new Permission(UserPermissionId, AppId, "User");
            }
        }

        #endregion Permissions

        #region Roles

        internal static Role AdminRole
        {
            get
            {
                var role = new Role(AdminRoleId, MainGroupId, AdminRoleName);
                role.Permissions = new List<Permission> { ErrorLogPermission, CreateUserPermission, EditPermission };
                role.Groups = new List<GroupInRole>();
                return role;
            }
        }

        internal static Role DivingCustomRole
        {
            get
            {
                var role = new Role(DivingCustomRoleId, DivingGroupId, "Diving Custom");
                role.Permissions = new List<Permission> { CreateUserPermission };
                role.Groups = new List<GroupInRole>();
                return role;
            }
        }

        internal static Role DivingPermissionSetRole
        {
            get
            {
                var role = new Role(DivingPermissionSetRoleId, DivingGroupId, Resources.DefaultValues.PermissionSetName);
                role.Permissions = new List<Permission> { CreateUserPermission };
                role.Groups = new List<GroupInRole>();
                return role;
            }
        }

        internal static Role EditorRole
        {
            get
            {
                var role = new Role(EditorRoleId, MainGroupId, EditorRoleName);
                role.Permissions = new List<Permission> { EditPermission };
                role.Groups = new List<GroupInRole>();
                return role;
            }
        }

        internal static Role GroupAdminRole
        {
            get
            {
                var role = new Role(GroupAdminRoleId, MainGroupId, GroupAdminRoleName);
                role.Permissions = new List<Permission> { CreateUserPermission, EditPermission };
                role.Groups = new List<GroupInRole>();
                return role;
            }
        }

        internal static Role OtherAppRole
        {
            get
            {
                var role = new Role(OtherAppRoleId, Guid.NewGuid(), OtherAppRoleName);
                role.Permissions = new List<Permission> { OtherAppPermission };
                role.Groups = new List<GroupInRole>();
                return role;
            }
        }

        internal static List<Role> Roles
        {
            get
            {
                return new List<Role>() { AdminRole, GroupAdminRole, EditorRole, UserRole, OtherAppRole, DivingPermissionSetRole, DivingCustomRole };
            }
        }

        internal static Role UserRole
        {
            get
            {
                var role = new Role(UserRoleId, MainGroupId, UserRoleName);
                role.Permissions = new List<Permission> { UserPermission };
                role.Groups = new List<GroupInRole>();
                return role;
            }
        }

        #endregion Roles

        #region GroupsInRoles

        internal static GroupInRole DivingGroupEditRole
        {
            get
            {
                var editRole = new GroupInRole(DivingGroupId, EditorRoleId, DateTime.Now.AddDays(-5), DateTime.Now.AddDays(-3));
                editRole.Role = EditorRole;
                editRole.CurrentNumberOfUsers = 2;
                editRole.MaxNumberOfUsers = 2;
                return editRole;
            }
        }

        internal static GroupInRole DivingGroupGroupAdminRole
        {
            get
            {
                var groupAdminRole = new GroupInRole(DivingGroupId, GroupAdminRoleId, DateTime.Now.AddDays(-1), null);
                groupAdminRole.Role = GroupAdminRole;
                groupAdminRole.CurrentNumberOfUsers = 1;
                groupAdminRole.MaxNumberOfUsers = 2;
                return groupAdminRole;
            }
        }

        internal static GroupInRole DivingGroupPermissionSet
        {
            get
            {
                var permissionSet = new GroupInRole(DivingGroupId, DivingPermissionSetRoleId, DateTime.Now.AddDays(-1), null);
                permissionSet.Role = DivingPermissionSetRole;
                return permissionSet;
            }
        }

        internal static List<GroupInRole> GroupsInRoles
        {
            get
            {
                return new List<GroupInRole> { MainGroupAdminRole, MainGroupGroupAdminRole, DivingGroupGroupAdminRole, DivingGroupEditRole, KarateGroupGroupAdminRole, KarateGroupEditRole, DivingGroupPermissionSet };
            }
        }

        internal static GroupInRole KarateGroupEditRole
        {
            get
            {
                var editRole = new GroupInRole(KarateGroupId, EditorRoleId, DateTime.Now.AddDays(-1), null);
                editRole.Role = EditorRole;
                return editRole;
            }
        }

        internal static GroupInRole KarateGroupGroupAdminRole
        {
            get
            {
                var groupAdminRole = new GroupInRole(KarateGroupId, GroupAdminRoleId, DateTime.Now.AddDays(5), DateTime.Now.AddDays(15));
                groupAdminRole.Role = GroupAdminRole;
                groupAdminRole.CurrentNumberOfUsers = 1;
                return groupAdminRole;
            }
        }

        internal static GroupInRole MainGroupAdminRole
        {
            get
            {
                var adminRole = new GroupInRole(MainGroupId, AdminRoleId, DateTime.Now.AddDays(-10), null);
                adminRole.Role = AdminRole;
                adminRole.CurrentNumberOfUsers = 1;
                return adminRole;
            }
        }

        internal static GroupInRole MainGroupEditRole
        {
            get
            {
                var editRole = new GroupInRole(MainGroupId, EditorRoleId, DateTime.Now.AddDays(-10), null);
                editRole.Role = EditorRole;
                editRole.CurrentNumberOfUsers = 1;
                return editRole;
            }
        }

        internal static GroupInRole MainGroupGroupAdminRole
        {
            get
            {
                var groupAdminRole = new GroupInRole(MainGroupId, GroupAdminRoleId, DateTime.Now.AddDays(-10), null);
                groupAdminRole.Role = GroupAdminRole;
                groupAdminRole.CurrentNumberOfUsers = 1;
                return groupAdminRole;
            }
        }

        #endregion GroupsInRoles

        #region Groups

        public static Group DivingGroup
        {
            get
            {
                var group = new Group(DivingGroupId, "Diving Group");
                group.Roles = new List<GroupInRole>() { DivingGroupGroupAdminRole, DivingGroupEditRole };
                group.CustomRoles = new List<Role>();
                return group;
            }
        }

        public static Group EmptyGroup
        {
            get
            {
                var group = new Group(EmptyGroupId, "Empty Group");
                group.Roles = new List<GroupInRole>();
                return group;
            }
        }

        public static List<Group> Groups
        {
            get
            {
                return new List<Group>() { MainGroup, DivingGroup, KarateGroup, EmptyGroup };
            }
        }

        public static Group KarateGroup
        {
            get
            {
                var group = new Group(KarateGroupId, "Karate Group");
                group.Roles = new List<GroupInRole>() { KarateGroupGroupAdminRole, KarateGroupEditRole };
                return group;
            }
        }

        public static Group MainGroup
        {
            get
            {
                var group = new Group(MainGroupId, "Main");
                group.Roles = new List<GroupInRole>() { MainGroupAdminRole, MainGroupGroupAdminRole, MainGroupEditRole };
                return group;
            }
        }

        #endregion Groups

        #region UsersInRoles

        internal static UserInRole AdminAdminRole
        {
            get
            {
                return new UserInRole(MainGroupAdminRole, AdminId, DateTime.Now.AddDays(-10), null);
            }
        }

        internal static UserInRole DivingEditorEditorRole
        {
            get
            {
                return new UserInRole(DivingGroupEditRole, DivingEditorId, DateTime.Now.AddDays(-5), null);
            }
        }

        internal static UserInRole DivingManagerEditorRole
        {
            get
            {
                return new UserInRole(DivingGroupEditRole, DivingManagerId, DateTime.Now.AddDays(-5), DateTime.Now.AddDays(-3));
            }
        }

        internal static UserInRole DivingManagerGroupAdminRole
        {
            get
            {
                return new UserInRole(DivingGroupGroupAdminRole, DivingManagerId, DateTime.Now.AddDays(-1), null);
            }
        }

        internal static UserInRole GeneralManagerGroupAdminRole
        {
            get
            {
                return new UserInRole(MainGroupGroupAdminRole, GeneralManagerId, DateTime.Now.AddDays(-10), null);
            }
        }

        internal static UserInRole KarateManagerEditorRole
        {
            get
            {
                return new UserInRole(KarateGroupEditRole, KarateManagerId, DateTime.Now.AddDays(-1), null);
            }
        }

        internal static UserInRole KarateManagerGroupAdminRole
        {
            get
            {
                return new UserInRole(KarateGroupGroupAdminRole, KarateManagerId, DateTime.Now.AddDays(5), null);
            }
        }

        internal static List<UserInRole> UsersInRoles
        {
            get
            {
                return new List<UserInRole> { AdminAdminRole, GeneralManagerGroupAdminRole, DivingManagerGroupAdminRole, DivingManagerEditorRole, KarateManagerGroupAdminRole, KarateManagerEditorRole, DivingEditorEditorRole };
            }
        }

        #endregion UsersInRoles

        #region Profiles

        public static List<UserProfileValue> AdministratorProfile
        {
            get
            {
                return new List<UserProfileValue>()
                {
                    new UserProfileValue
                    {
                        CustomField = new UserProfileField()
                        {
                            Name = "BirthDate",
                            FieldType = CustomFieldType.DateTime
                        },
                        UserId = AdminId,
                        Culture = "en",
                        NumberValue = new DateTime(1980, 8, 26).Ticks
                    },
                    new UserProfileValue
                    {
                        CustomField = new UserProfileField()
                        {
                            Name = "City",
                            FieldType = CustomFieldType.String
                        },
                        UserId = AdminId,
                        Culture = "en",
                        StringValue = "Leusden"
                    },
                    new UserProfileValue
                    {
                        CustomField = new UserProfileField()
                        {
                            Name = "Stars",
                            FieldType = CustomFieldType.Integer
                        },
                        UserId = AdminId,
                        Culture = "en",
                        NumberValue = 5
                    }
                };
            }
        }

        public static List<UserProfileValue> GeneralManagerProfile
        {
            get
            {
                return new List<UserProfileValue>()
                {
                    new UserProfileValue
                    {
                        CustomField = new UserProfileField()
                        {
                            Name = "BirthDate",
                            FieldType = CustomFieldType.DateTime
                        },
                        UserId = GeneralManagerId,
                        Culture = "en",
                        NumberValue = new DateTime(1982, 7, 7).Ticks
                    },
                    new UserProfileValue
                    {
                        CustomField = new UserProfileField()
                        {
                            Name = "City",
                            FieldType = CustomFieldType.String
                        },
                        UserId = GeneralManagerId,
                        Culture = "en",
                        StringValue = "Leusden"
                    },
                    new UserProfileValue
                    {
                        CustomField = new UserProfileField()
                        {
                            Name = "Stars",
                            FieldType = CustomFieldType.Integer
                        },
                        UserId = GeneralManagerId,
                        Culture = "en",
                        NumberValue = 4
                    }
                };
            }
        }

        public static List<UserProfileValue> Profiles
        {
            get
            {
                return AdministratorProfile.Concat(GeneralManagerProfile).ToList();
            }
        }

        #endregion Profiles

        #region Users

        public static User Administrator
        {
            get
            {
                var user = new User(AdminId, "admin@strixit.com", AdminName);
                user.Roles = new List<UserInRole> { AdminAdminRole };
                return user;
            }
        }

        public static User DivingEditor
        {
            get
            {
                var user = new User(DivingEditorId, "divingedit@strixit.com", "Diving editor");
                user.Roles = new List<UserInRole>
                {
                    DivingEditorEditorRole,
                };
                user.ProfileValues = new List<UserProfileValue>();
                return user;
            }
        }

        public static User DivingManager
        {
            get
            {
                var user = new User(DivingManagerId, "diving@strixit.com", "Diving manager");
                user.Roles = new List<UserInRole>
                {
                    DivingManagerGroupAdminRole,
                    DivingManagerEditorRole,
                };
                user.ProfileValues = new List<UserProfileValue>();
                return user;
            }
        }

        public static User GeneralManager
        {
            get
            {
                var user = new User(GeneralManagerId, "general@strixit.com", "General manager");
                user.Roles = new List<UserInRole> { GeneralManagerGroupAdminRole };
                return user;
            }
        }

        public static User KarateManager
        {
            get
            {
                var user = new User(KarateManagerId, "karate@strixit.com", "Karate manager");
                user.Roles = new List<UserInRole>
                {
                    KarateManagerGroupAdminRole,
                    KarateManagerEditorRole,
                };
                return user;
            }
        }

        public static List<User> Users
        {
            get
            {
                return new List<User>() { Administrator, GeneralManager, DivingManager, KarateManager, DivingEditor };
            }
        }

        internal static UserSecurity AdministratorSecurity
        {
            get
            {
                var security = new UserSecurity(AdminId);
                security.Approved = true;
                // password: testtest!
                security.Password = "AMMgsEWiM+hyWFz3h5CY3XBQLMaHAOqhCse2jjyXfAdQT9E4i91h1JVeyHnr4r/wrw==";
                return security;
            }
        }

        internal static UserSecurity DivingEditorSecurity
        {
            get
            {
                var security = new UserSecurity(DivingEditorId);
                // password: testtest!
                security.Password = "AMMgsEWiM+hyWFz3h5CY3XBQLMaHAOqhCse2jjyXfAdQT9E4i91h1JVeyHnr4r/wrw==";
                security.Approved = true;
                return security;
            }
        }

        internal static UserSecurity DivingManagerSecurity
        {
            get
            {
                var security = new UserSecurity(DivingManagerId);
                security.Approved = true;
                return security;
            }
        }

        internal static UserSecurity GeneralManagerSecurity
        {
            get
            {
                var security = new UserSecurity(GeneralManagerId);
                security.Approved = true;
                security.Password = "TestTest!";
                return security;
            }
        }

        internal static UserSecurity KarateManagerSecurity
        {
            get
            {
                var security = new UserSecurity(KarateManagerId);
                security.Approved = true;
                return security;
            }
        }

        internal static List<UserSecurity> UserSecurity
        {
            get
            {
                return new List<UserSecurity>() { AdministratorSecurity, GeneralManagerSecurity, DivingManagerSecurity, KarateManagerSecurity, DivingEditorSecurity };
            }
        }

        #endregion Users

        #region Session

        internal static List<UserSessionStorage> Sessions
        {
            get
            {
                var dict = new Dictionary<string, object>();
                dict.Add("CurrentGroupId", MembershipTestData.MainGroupId);
                var json = JsonConvert.SerializeObject(dict);

                var session = new UserSessionStorage(AdminId);
                session.User = MembershipTestData.Administrator;
                session.Session = json;

                var sessions = new List<UserSessionStorage>()
                {
                    session
                };

                return sessions;
            }
        }

        #endregion Session
    }
}