//------------------------------------------------------------------------------
// <auto-generated>
//     This code was not generated by a tool. but for stylecop suppression.
// </auto-generated>
//------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using StrixIT.Platform.Core;
using StrixIT.Platform.Core.DependencyInjection;
using StrixIT.Platform.Core.Environment;
using StrixIT.Platform.Web;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Principal;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;

namespace StrixIT.Platform.Modules.Membership.Tests
{
    [TestClass]
    public class LinkAuthenticationToSessionAttributeTests
    {
        #region Private Fields

        private static Mock<IAuthenticationService> _authService = new Mock<IAuthenticationService>();

        #endregion Private Fields

        #region Public Methods

        [TestMethod]
        public void WhenThereIsNoSessionTheUserShouldBeLoggedOutAndRedirectedToLogin()
        {
            var attribute = new LinkAuthenticationToSessionAttribute();
            List<Mock> mocks;
            var context = GetAuthorizationContext(out mocks);
            var session = mocks.First(m => m.GetType() == typeof(Mock<HttpSessionStateBase>)) as Mock<HttpSessionStateBase>;
            var identity = mocks.First(m => m.GetType() == typeof(Mock<IIdentity>)) as Mock<IIdentity>;
            identity.Setup(i => i.IsAuthenticated).Returns(true);
            identity.Setup(i => i.Name).Returns("Test");
            var injectorMock = new Mock<IDependencyInjector>();
            injectorMock.Setup(i => i.TryGet<IAuthenticationService>()).Returns(_authService.Object);
            DependencyInjector.Injector = injectorMock.Object;
            attribute.OnActionExecuting(context);
            DependencyInjector.Injector = null;
            var result = context.Result as RedirectToRouteResult;
            _authService.Verify(a => a.LogOff(null), Times.Once());
            Assert.AreEqual("account", result.RouteValues["controller"]);
            Assert.AreEqual("login", result.RouteValues["action"]);
            Assert.AreEqual("/membership/user", result.RouteValues["returnurl"]);
        }

        #endregion Public Methods

        #region Private Methods

        private ActionExecutingContext GetAuthorizationContext(out List<Mock> mocks)
        {
            mocks = new List<Mock>();
            var identity = new Mock<IIdentity>();
            identity.Setup(i => i.Name).Returns("admin@strixit.com");
            identity.Setup(i => i.IsAuthenticated).Returns(false);
            mocks.Add(identity);
            var principal = new Mock<IPrincipal>();
            principal.Setup(p => p.Identity).Returns(identity.Object);
            mocks.Add(principal);
            var request = new Mock<HttpRequestBase>();
            request.Setup(r => r.Url).Returns(new Uri("http://www.strixit.com/membership/user"));
            mocks.Add(request);
            var cache = new Mock<HttpCachePolicyBase>();
            mocks.Add(cache);
            var response = new Mock<HttpResponseBase>();
            response.Setup(r => r.Cache).Returns(cache.Object);
            mocks.Add(response);
            var httpContext = new Mock<HttpContextBase>();
            httpContext.Setup(h => h.User).Returns(principal.Object);
            httpContext.Setup(h => h.Request).Returns(request.Object);
            mocks.Add(httpContext);
            var session = new Mock<HttpSessionStateBase>();
            session.Setup(s => s[MembershipCacheAndSessionKeys.LinkAuthenticationToSession]).Returns("admin@strixit.com");
            mocks.Add(session);
            httpContext.Setup(h => h.Session).Returns(session.Object);
            var routeData = new RouteData();
            var requestContext = new RequestContext(httpContext.Object, routeData);

            var userMock = new Mock<IUserContext>();
            userMock.Setup(m => m.Id).Returns(MembershipTestData.AdminId);
            userMock.Setup(m => m.GroupId).Returns(MembershipTestData.MainGroupId);

            var environmentMock = new Mock<IEnvironment>();
            environmentMock.Setup(m => m.User).Returns(userMock.Object);

            var cultureServiceMock = new Mock<ICultureService>();
            cultureServiceMock.Setup(c => c.Cultures).Returns(new List<CultureData> { new CultureData { Code = "en", Name = "English" }, new CultureData { Code = "nl", Name = "Nederlands" } });
            cultureServiceMock.Setup(c => c.DefaultCultureCode).Returns("en");
            cultureServiceMock.Setup(c => c.CurrentCultureCode).Returns("en");
            environmentMock.Setup(e => e.Cultures).Returns(cultureServiceMock.Object);

            var controller = new UserController(environmentMock.Object, new Mock<IUserService>().Object);
            var controllerContext = new ControllerContext(requestContext, controller);
            var controllerDescriptor = new Mock<ControllerDescriptor>();
            controllerDescriptor.Setup(c => c.ControllerType).Returns(typeof(AccountController));
            mocks.Add(controllerDescriptor);
            var actionDescriptor = new Mock<ActionDescriptor>();
            actionDescriptor.Setup(a => a.ControllerDescriptor).Returns(controllerDescriptor.Object);
            actionDescriptor.Setup(c => c.ActionName).Returns("Home");
            mocks.Add(actionDescriptor);
            var context = new ActionExecutingContext(controllerContext, actionDescriptor.Object, new Dictionary<string, object>());
            return context;
        }

        #endregion Private Methods
    }
}