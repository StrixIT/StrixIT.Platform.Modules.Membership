//------------------------------------------------------------------------------
// <auto-generated>
//     This code was not generated by a tool. but for stylecop suppression.
// </auto-generated>
//------------------------------------------------------------------------------
using Moq;
using StrixIT.Platform.Core;
using StrixIT.Platform.Core.Environment;
using System;
using System.Collections.Generic;
using System.Linq;

namespace StrixIT.Platform.Modules.Membership.Tests
{
    public class RoleManagerMock
    {
        #region Private Fields

        private Mock<IConfiguration> _configMock = new Mock<IConfiguration>();
        private DataSourceMock _dataSourceMock = new DataSourceMock();
        private Mock<IRoleManager> _managerMock = new Mock<IRoleManager>();
        private IRoleManager _roleManager;
        private Mock<IUserContext> _userMock = new Mock<IUserContext>();

        #endregion Private Fields

        #region Public Constructors

        public RoleManagerMock()
        {
            _dataSourceMock.RegisterData<Application>(new List<Application> { MembershipTestData.Application });
            _dataSourceMock.RegisterData<Role>(MembershipTestData.Roles);
            _dataSourceMock.RegisterData<User>(MembershipTestData.Users);
            _dataSourceMock.RegisterData<Group>(MembershipTestData.Groups);
            _dataSourceMock.RegisterData<GroupInRole>(MembershipTestData.GroupsInRoles);
            _dataSourceMock.RegisterData<UserInRole>(MembershipTestData.UsersInRoles);

            _dataSourceMock.Mock.Setup(m => m.Find<GroupInRole>(It.IsAny<object[]>())).Returns<object[]>(p => _dataSourceMock.DataList<GroupInRole>().FirstOrDefault(r => r.GroupId == (Guid)p[0] && r.RoleId == (Guid)p[1]));
            _dataSourceMock.Mock.Setup(m => m.Find<UserInRole>(It.IsAny<object[]>())).Returns<object[]>(p => _dataSourceMock.DataList<UserInRole>().FirstOrDefault(r => r.GroupRoleGroupId == (Guid)p[0] && r.GroupRoleRoleId == (Guid)p[1] && r.UserId == (Guid)p[2]));

            _userMock.Setup(m => m.Id).Returns(MembershipTestData.AdminId);
            _userMock.Setup(m => m.GroupId).Returns(MembershipTestData.MainGroupId);

            var platformConfiguration = new PlatformConfiguration();
            platformConfiguration.ApplicationName = "StrixIT Membership Tests";
            var membershipConfiguration = new MembershipConfiguration();
            membershipConfiguration.UseGroups = true;
            membershipConfiguration.UsePermissions = true;
            _configMock.Setup(m => m.GetConfiguration<PlatformConfiguration>()).Returns(platformConfiguration);
            _configMock.Setup(m => m.GetConfiguration<MembershipConfiguration>()).Returns(membershipConfiguration);

            var membershipSettingsMock = new Mock<IMembershipSettings>();

            _roleManager = new RoleManager(_dataSourceMock.Mock.Object, _userMock.Object, _configMock.Object, membershipSettingsMock.Object);
        }

        #endregion Public Constructors

        #region Properties

        public Mock<IRoleManager> Mock
        {
            get
            {
                return _managerMock;
            }
        }

        public IRoleManager RoleManager
        {
            get
            {
                return _roleManager;
            }
        }

        public Mock<IUserContext> UserMock
        {
            get
            {
                return _userMock;
            }
        }

        internal DataSourceMock DataSourceMock
        {
            get
            {
                return _dataSourceMock;
            }
        }

        #endregion Properties

        #region Public Methods

        public void FixRelations()
        {
            foreach (var role in _dataSourceMock.DataList<Role>())
            {
                if (role.Groups == null)
                {
                    role.Groups = new List<GroupInRole>();
                }

                foreach (var group in _dataSourceMock.DataList<Group>())
                {
                    foreach (var groupInRole in group.Roles)
                    {
                        if (groupInRole.RoleId == role.Id)
                        {
                            groupInRole.Role = role;
                            role.Groups.Add(groupInRole);
                        }
                    }
                }
            }
        }

        #endregion Public Methods
    }
}