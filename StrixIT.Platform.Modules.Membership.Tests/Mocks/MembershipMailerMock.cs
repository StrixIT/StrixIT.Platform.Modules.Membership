//------------------------------------------------------------------------------
// <auto-generated>
//     This code was not generated by a tool. but for stylecop suppression.
// </auto-generated>
//------------------------------------------------------------------------------
using Moq;
using StrixIT.Platform.Core;
using StrixIT.Platform.Core.Environment;
using StrixIT.Platform.Framework;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Dynamic;
using System.Net.Configuration;
using System.Web;

namespace StrixIT.Platform.Modules.Membership.Tests
{
    public class MembershipMailerMock
    {
        #region Private Fields

        private Mock<IConfiguration> _configMock = new Mock<IConfiguration>();
        private Mock<ICultureService> _cultureServiceMock = new Mock<ICultureService>();
        private Mock<IEnvironment> _environmentMock = new Mock<IEnvironment>();
        private Mock<HttpContextBase> _httpMock = new Mock<HttpContextBase>();
        private Mock<HttpRequestBase> _httpRequestMock = new Mock<HttpRequestBase>();
        private Mock<IMailer> _mailerMock = new Mock<IMailer>();
        private IMembershipMailer _membershipMailer;
        private Mock<IFileSystem> _wrapperMock = new Mock<IFileSystem>();

        #endregion Private Fields

        #region Public Constructors

        public MembershipMailerMock()
        {
            var platformConfiguration = new PlatformConfiguration();
            platformConfiguration.ApplicationName = "StrixIT Membership Tests";
            var membershipConfiguration = new MembershipConfiguration();
            membershipConfiguration.UseGroups = true;
            membershipConfiguration.AllowUserRegistration = true;
            membershipConfiguration.AutoApproveUsers = true;
            membershipConfiguration.MailTemplateFolder = "Areas/Membership/Templates";
            _configMock.Setup(m => m.GetConfiguration<PlatformConfiguration>()).Returns(platformConfiguration);
            _configMock.Setup(m => m.GetConfiguration<MembershipConfiguration>()).Returns(membershipConfiguration);
            _configMock.Setup(m => m.FromAddress).Returns("test@test.nl");
            _cultureServiceMock.Setup(c => c.Cultures).Returns(new List<CultureData> { new CultureData { Code = "en", Name = "English" }, new CultureData { Code = "nl", Name = "Nederlands" } });
            _cultureServiceMock.Setup(c => c.DefaultCultureCode).Returns("en");
            _cultureServiceMock.Setup(c => c.CurrentCultureCode).Returns("en");
            _environmentMock.Setup(e => e.Cultures).Returns(_cultureServiceMock.Object);
            _environmentMock.Setup(e => e.Configuration).Returns(_configMock.Object);

            _wrapperMock.Setup(w => w.GetHtmlTemplate(It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>())).Returns<string, string, string>((x, y, z) => new FileSystem(_environmentMock.Object).GetHtmlTemplate(string.Format("{0}\\Templates", Core.Helpers.GetWorkingDirectory()), y, z));
            _httpRequestMock.Setup(m => m.Url).Returns(new Uri("http://www.strixit.com"));
            _httpRequestMock.Setup(m => m.ApplicationPath).Returns("/");
            _httpMock.Setup(m => m.Request).Returns(_httpRequestMock.Object);

            _membershipMailer = new MembershipMailer(_environmentMock.Object, _wrapperMock.Object, _mailerMock.Object, _httpMock.Object);
        }

        #endregion Public Constructors

        #region Public Properties

        public Mock<IFileSystem> FileSystemWrapperMock
        {
            get
            {
                return _wrapperMock;
            }
        }

        public Mock<HttpContextBase> HttpContextMock
        {
            get
            {
                return _httpMock;
            }
        }

        public Mock<IMailer> MailerMock
        {
            get
            {
                return _mailerMock;
            }
        }

        public IMembershipMailer MembershipMailer
        {
            get
            {
                return _membershipMailer;
            }
        }

        #endregion Public Properties
    }
}