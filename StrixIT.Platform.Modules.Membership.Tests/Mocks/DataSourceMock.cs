//------------------------------------------------------------------------------
// <auto-generated>
//     This code was not generated by a tool. but for stylecop suppression.
// </auto-generated>
//------------------------------------------------------------------------------
using Moq;
using StrixIT.Platform.Core;
using System;
using System.Collections.Generic;
using System.Linq;

namespace StrixIT.Platform.Modules.Membership.Tests
{
    public class DataSourceMock
    {
        #region Private Fields

        private Dictionary<Type, List<object>> _dataLists = new Dictionary<Type, List<object>>();
        private Mock<IMembershipDataSource> _dataSourceMock = new Mock<IMembershipDataSource>();

        #endregion Private Fields

        #region Public Properties

        public Mock<IMembershipDataSource> Mock
        {
            get
            {
                return _dataSourceMock;
            }
        }

        #endregion Public Properties

        #region Public Methods

        public void AddDataItem<T>(T item)
        {
            var type = typeof(T);

            if (!_dataLists.ContainsKey(type))
            {
                throw new KeyNotFoundException();
            }

            _dataLists[type].Add(item);
        }

        public List<T> DataList<T>()
        {
            var list = _dataLists.ContainsKey(typeof(T)) ? _dataLists[typeof(T)].Cast<T>().ToList() : new List<T>();
            return list;
        }

        public void RegisterData<T>(IEnumerable<T> data) where T : class
        {
            var type = typeof(T);

            if (!_dataLists.ContainsKey(type))
            {
                _dataLists.Add(type, new List<T>().Cast<object>().ToList());
            }

            _dataLists[type] = data.Cast<object>().ToList();
            _dataSourceMock.Setup(s => s.Query<T>()).Returns(_dataLists[type].Cast<T>().AsQueryable());

            if (type.GetProperty("Id") != null)
            {
                _dataSourceMock.Setup(s => s.Find<T>(It.IsAny<object[]>())).Returns<object[]>(p => _dataLists[type].FirstOrDefault(d => (Guid)d.GetPropertyValue("Id") == (Guid)p.First()) as T);
            }
        }

        #endregion Public Methods
    }
}