//------------------------------------------------------------------------------
// <auto-generated>
//     This code was not generated by a tool. but for stylecop suppression.
// </auto-generated>
//------------------------------------------------------------------------------
using Moq;
using StrixIT.Platform.Core;
using StrixIT.Platform.Core.Environment;
using System.Collections.Generic;

namespace StrixIT.Platform.Modules.Membership.Tests
{
    public class AccountServiceMock
    {
        #region Private Fields

        private IAccountService _accountService;
        private Mock<IConfiguration> _configMock = new Mock<IConfiguration>();
        private Mock<ICultureService> _cultureServiceMock = new Mock<ICultureService>();
        private Mock<IMembershipDataSource> _dataSourceMock = new Mock<IMembershipDataSource>();
        private Mock<IEnvironment> _environmentMock = new Mock<IEnvironment>();
        private Mock<IMembershipMailer> _mailerMock = new Mock<IMembershipMailer>();
        private Mock<IRoleManager> _roleManagerMock = new Mock<IRoleManager>();
        private Mock<ISecurityManager> _securityManagerMock = new Mock<ISecurityManager>();
        private Mock<IUserManager> _userManagerMock = new Mock<IUserManager>();
        private Mock<IUserContext> _userMock = new Mock<IUserContext>();

        #endregion Private Fields

        #region Public Constructors

        public AccountServiceMock()
        {
            _userMock.Setup(m => m.Id).Returns(MembershipTestData.AdminId);
            _userMock.Setup(m => m.GroupId).Returns(MembershipTestData.MainGroupId);

            var platformConfiguration = new PlatformConfiguration();
            platformConfiguration.ApplicationName = "StrixIT Membership Tests";
            var membershipConfiguration = new MembershipConfiguration();
            membershipConfiguration.UseGroups = true;
            membershipConfiguration.AllowUserRegistration = true;
            membershipConfiguration.AutoApproveUsers = true;
            _configMock.Setup(m => m.GetConfiguration<PlatformConfiguration>()).Returns(platformConfiguration);
            _configMock.Setup(m => m.GetConfiguration<MembershipConfiguration>()).Returns(membershipConfiguration);
            _cultureServiceMock.Setup(c => c.Cultures).Returns(new List<CultureData> { new CultureData { Code = "en", Name = "English" }, new CultureData { Code = "nl", Name = "Nederlands" } });
            _cultureServiceMock.Setup(c => c.DefaultCultureCode).Returns("en");
            _cultureServiceMock.Setup(c => c.CurrentCultureCode).Returns("en");
            _environmentMock.Setup(e => e.Configuration).Returns(_configMock.Object);
            _environmentMock.Setup(e => e.User).Returns(_userMock.Object);
            _environmentMock.Setup(e => e.Cultures).Returns(_cultureServiceMock.Object);

            var membershipDataMock = new Mock<IMembershipData>();
            membershipDataMock.Setup(m => m.DataSource).Returns(_dataSourceMock.Object);
            membershipDataMock.Setup(m => m.RoleManager).Returns(_roleManagerMock.Object);
            membershipDataMock.Setup(m => m.UserManager).Returns(_userManagerMock.Object);
            membershipDataMock.Setup(m => m.SecurityManager).Returns(_securityManagerMock.Object);

            _accountService = new AccountService(membershipDataMock.Object, _mailerMock.Object, _environmentMock.Object);
        }

        #endregion Public Constructors

        #region Properties

        public IAccountService AccountService
        {
            get
            {
                return _accountService;
            }
        }

        public Mock<IMembershipDataSource> DataSourceMock
        {
            get
            {
                return _dataSourceMock;
            }
        }

        public Mock<IMembershipMailer> MailerMock
        {
            get
            {
                return _mailerMock;
            }
        }

        public Mock<IRoleManager> RoleManagerMock
        {
            get
            {
                return _roleManagerMock;
            }
        }

        public Mock<ISecurityManager> SecurityManagerMock
        {
            get
            {
                return _securityManagerMock;
            }
        }

        public Mock<IUserManager> UserManagerMock
        {
            get
            {
                return _userManagerMock;
            }
        }

        public Mock<IUserContext> UserMock
        {
            get
            {
                return _userMock;
            }
        }

        #endregion Properties
    }
}