//------------------------------------------------------------------------------
// <auto-generated>
//     This code was not generated by a tool. but for stylecop suppression.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Linq;
using Moq;
using StrixIT.Platform.Core;
using System.Collections.Generic;
using System;

namespace StrixIT.Platform.Modules.Membership.Tests
{
    public class UserServiceMock
    {
        private Mock<IMembershipDataSource> _dataSourceMock = new Mock<IMembershipDataSource>();
        private Mock<ISecurityManager> _securityManagerMock = new Mock<ISecurityManager>();
        private Mock<IUserManager> _userManagerMock = new Mock<IUserManager>();
        private Mock<IGroupManager> _groupManagerMock = new Mock<IGroupManager>();
        private Mock<IRoleManager> _roleManagerMock = new Mock<IRoleManager>();
        private Mock<IMembershipMailer> _mailerMock = new Mock<IMembershipMailer>();
        private IUserService _userService;

        public UserServiceMock()
        {
            var users = MembershipTestData.Users;

            foreach (var user in users)
            {
                _userManagerMock.Setup(u => u.Get(user.Id)).Returns(user);
                _userManagerMock.Setup(u => u.Get(user.Email)).Returns(user);
                _securityManagerMock.Setup(s => s.GetAccountStatusData(new Guid[] { user.Id })).Returns(new List<AccountStatus> { new AccountStatus { Approved = true, LockedOut = false } });
            }

            var groups = MembershipTestData.Groups;

            foreach (var group in groups)
            {
                var groupUsers = users.Where(u => u.Roles.Any(r => r.GroupRoleGroupId == group.Id)).ToList();
            }

            _groupManagerMock.Setup(g => g.Query()).Returns(groups.AsQueryable());
            _roleManagerMock.Setup(g => g.Query()).Returns(MembershipTestData.Roles.AsQueryable());
            _userService = new UserService(_dataSourceMock.Object, _securityManagerMock.Object, _userManagerMock.Object, _groupManagerMock.Object, _roleManagerMock.Object, _mailerMock.Object);
        }

        #region Properties

        public IUserService UserService
        {
            get
            {
                return _userService;
            }
        }

        public Mock<IMembershipDataSource> DataSourceMock
        {
            get
            {
                return _dataSourceMock;
            }
        }

        public Mock<ISecurityManager> SecurityManagerMock
        {
            get
            {
                return _securityManagerMock;
            }
        }

        public Mock<IUserManager> UserManagerMock
        {
            get
            {
                return _userManagerMock;
            }
        }

        public Mock<IGroupManager> GroupManagerMock
        {
            get
            {
                return _groupManagerMock;
            }
        }

        public Mock<IRoleManager> RoleManagerMock
        {
            get
            {
                return _roleManagerMock;
            }
        }

        public Mock<IMembershipMailer> MailerMock
        {
            get
            {
                return _mailerMock;
            }
        }

        #endregion
    }
}
