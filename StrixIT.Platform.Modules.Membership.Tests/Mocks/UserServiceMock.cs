//------------------------------------------------------------------------------
// <auto-generated>
//     This code was not generated by a tool. but for stylecop suppression.
// </auto-generated>
//------------------------------------------------------------------------------
using Moq;
using StrixIT.Platform.Core;
using StrixIT.Platform.Core.Environment;
using System;
using System.Collections.Generic;
using System.Linq;

namespace StrixIT.Platform.Modules.Membership.Tests
{
    public class UserServiceMock
    {
        #region Private Fields

        private Mock<ICultureService> _cultureServiceMock = new Mock<ICultureService>();
        private Mock<IMembershipDataSource> _dataSourceMock = new Mock<IMembershipDataSource>();
        private Mock<IEnvironment> _environmentMock = new Mock<IEnvironment>();
        private Mock<IGroupManager> _groupManagerMock = new Mock<IGroupManager>();
        private Mock<IMembershipMailer> _mailerMock = new Mock<IMembershipMailer>();
        private Mock<IRoleManager> _roleManagerMock = new Mock<IRoleManager>();
        private Mock<ISecurityManager> _securityManagerMock = new Mock<ISecurityManager>();
        private Mock<IUserManager> _userManagerMock = new Mock<IUserManager>();
        private Mock<IUserContext> _userMock = new Mock<IUserContext>();
        private IUserService _userService;

        #endregion Private Fields

        #region Public Constructors

        public UserServiceMock()
        {
            var users = MembershipTestData.Users;

            foreach (var user in users)
            {
                _userManagerMock.Setup(u => u.Get(user.Id)).Returns(user);
                _userManagerMock.Setup(u => u.Get(user.Email)).Returns(user);
                _securityManagerMock.Setup(s => s.GetAccountStatusData(new Guid[] { user.Id })).Returns(new List<AccountStatus> { new AccountStatus { Approved = true, LockedOut = false } });
            }

            var groups = MembershipTestData.Groups;

            foreach (var group in groups)
            {
                var groupUsers = users.Where(u => u.Roles.Any(r => r.GroupRoleGroupId == group.Id)).ToList();
            }

            _groupManagerMock.Setup(g => g.Query()).Returns(groups.AsQueryable());
            _roleManagerMock.Setup(g => g.Query()).Returns(MembershipTestData.Roles.AsQueryable());
            _userMock.Setup(m => m.Id).Returns(MembershipTestData.AdminId);
            _userMock.Setup(m => m.GroupId).Returns(MembershipTestData.MainGroupId);
            _cultureServiceMock.Setup(c => c.Cultures).Returns(new List<CultureData> { new CultureData { Code = "en", Name = "English" }, new CultureData { Code = "nl", Name = "Nederlands" } });
            _cultureServiceMock.Setup(c => c.DefaultCultureCode).Returns("en");
            _cultureServiceMock.Setup(c => c.CurrentCultureCode).Returns("en");
            _environmentMock.Setup(e => e.User).Returns(_userMock.Object);
            _environmentMock.Setup(e => e.Cultures).Returns(_cultureServiceMock.Object);

            var membershipDataMock = new Mock<IMembershipData>();
            membershipDataMock.Setup(m => m.GroupManager).Returns(_groupManagerMock.Object);
            membershipDataMock.Setup(m => m.DataSource).Returns(_dataSourceMock.Object);
            membershipDataMock.Setup(m => m.RoleManager).Returns(_roleManagerMock.Object);
            membershipDataMock.Setup(m => m.UserManager).Returns(_userManagerMock.Object);
            membershipDataMock.Setup(m => m.SecurityManager).Returns(_securityManagerMock.Object);

            _userService = new UserService(membershipDataMock.Object, _mailerMock.Object, _environmentMock.Object);
        }

        #endregion Public Constructors

        #region Properties

        public Mock<IMembershipDataSource> DataSourceMock
        {
            get
            {
                return _dataSourceMock;
            }
        }

        public Mock<IGroupManager> GroupManagerMock
        {
            get
            {
                return _groupManagerMock;
            }
        }

        public Mock<IMembershipMailer> MailerMock
        {
            get
            {
                return _mailerMock;
            }
        }

        public Mock<IRoleManager> RoleManagerMock
        {
            get
            {
                return _roleManagerMock;
            }
        }

        public Mock<ISecurityManager> SecurityManagerMock
        {
            get
            {
                return _securityManagerMock;
            }
        }

        public Mock<IUserManager> UserManagerMock
        {
            get
            {
                return _userManagerMock;
            }
        }

        public Mock<IUserContext> UserMock
        {
            get
            {
                return _userMock;
            }
        }

        public IUserService UserService
        {
            get
            {
                return _userService;
            }
        }

        #endregion Properties
    }
}