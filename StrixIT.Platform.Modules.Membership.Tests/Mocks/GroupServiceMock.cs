//------------------------------------------------------------------------------
// <auto-generated>
//     This code was not generated by a tool. but for stylecop suppression.
// </auto-generated>
//------------------------------------------------------------------------------
using Moq;
using StrixIT.Platform.Core;
using StrixIT.Platform.Core.Environment;

namespace StrixIT.Platform.Modules.Membership.Tests
{
    public class GroupServiceMock
    {
        #region Private Fields

        private Mock<IConfiguration> _configMock = new Mock<IConfiguration>();
        private Mock<IMembershipDataSource> _dataSourceMock = new Mock<IMembershipDataSource>();
        private Mock<IGroupManager> _groupManagerMock = new Mock<IGroupManager>();
        private IGroupService _groupService;
        private Mock<IRoleManager> _roleManagerMock = new Mock<IRoleManager>();
        private Mock<IUserManager> _userManagerMock = new Mock<IUserManager>();
        private Mock<IUserContext> _userMock = new Mock<IUserContext>();

        #endregion Private Fields

        #region Public Constructors

        public GroupServiceMock()
        {
            _userMock.Setup(m => m.Id).Returns(MembershipTestData.AdminId);
            _userMock.Setup(m => m.GroupId).Returns(MembershipTestData.MainGroupId);

            var platformConfiguration = new PlatformConfiguration();
            platformConfiguration.ApplicationName = "StrixIT Membership Tests";
            var membershipConfiguration = new MembershipConfiguration();
            membershipConfiguration.UseGroups = true;
            _configMock.Setup(m => m.GetConfiguration<PlatformConfiguration>()).Returns(platformConfiguration);
            _configMock.Setup(m => m.GetConfiguration<MembershipConfiguration>()).Returns(membershipConfiguration);
            var membershipSettingsMock = new Mock<IMembershipSettings>();
            membershipSettingsMock.Setup(m => m.ApplicationId).Returns(MembershipTestData.AppId);
            membershipSettingsMock.Setup(m => m.MainGroupId).Returns(MembershipTestData.MainGroupId);

            var environmentMock = new Mock<IEnvironment>();
            environmentMock.Setup(e => e.Configuration).Returns(_configMock.Object);
            environmentMock.Setup(e => e.User).Returns(_userMock.Object);
            environmentMock.Setup(e => e.Membership).Returns(membershipSettingsMock.Object);

            _groupService = new GroupService(_dataSourceMock.Object, _groupManagerMock.Object, _roleManagerMock.Object, environmentMock.Object);
        }

        #endregion Public Constructors

        #region Properties

        public Mock<IMembershipDataSource> DataSourceMock
        {
            get
            {
                return _dataSourceMock;
            }
        }

        public Mock<IGroupManager> GroupManagerMock
        {
            get
            {
                return _groupManagerMock;
            }
        }

        public IGroupService GroupService
        {
            get
            {
                return _groupService;
            }
        }

        public Mock<IRoleManager> RoleManagerMock
        {
            get
            {
                return _roleManagerMock;
            }
        }

        public Mock<IUserManager> UserManagerMock
        {
            get
            {
                return _userManagerMock;
            }
        }

        public Mock<IUserContext> UserMock
        {
            get
            {
                return _userMock;
            }
        }

        #endregion Properties
    }
}