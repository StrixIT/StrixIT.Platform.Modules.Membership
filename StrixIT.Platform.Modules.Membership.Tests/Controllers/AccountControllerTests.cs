//------------------------------------------------------------------------------
// <auto-generated>
//     This code was not generated by a tool. but for stylecop suppression.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using System.Web.Mvc;
using System.Collections.Generic;
using StrixIT.Platform.Core;
using StrixIT.Platform.Web;

namespace StrixIT.Platform.Modules.Membership.Tests.Controllers
{
    [TestClass]
    public class AccountControllerTests
    {
        private Mock<IUserContext> _userContextMock;

        [ClassInitialize]
        public static void Init(TestContext context)
        {
            DataMapper.CreateMap<User, UserViewModel>();
            DataMapper.CreateMap<UserInRole, AssignRoleModel>().ForMember(ar => ar.Id, c => c.MapFrom(ur => ur.UserId));
        }

        [TestInitialize]
        public void Init()
        {
            _userContextMock = TestHelpers.MockUserContext();
            StrixPlatform.Environment = new DefaultEnvironment();
        }

        [TestCleanup]
        public void Cleanup()
        {
            StrixPlatform.Environment = null;
        }

        #region Login

        [TestMethod]
        public void LoginShouldRedirectToHomeWhenNoReturnUrlPresent()
        {
            var mock = new AccountControllerMock();
            mock.AuthenticationService.Setup(s => s.LogOn("Test", "Test")).Returns(new LoginUserResult { Success = true, PreferredCulture = "en" });
            var result = mock.AccountController.Login(new LoginViewModel { Email = "Test", Password = "Test" }) as RedirectToRouteResult;
            Assert.IsNotNull(result);
            Assert.AreEqual(string.Empty, result.RouteValues["area"]);
            Assert.AreEqual("en", result.RouteValues[PlatformConstants.LANGUAGE]);
            Assert.AreEqual("Home", result.RouteValues["controller"]);
            Assert.AreEqual(MvcConstants.INDEX, result.RouteValues["action"]);
        }

        [TestMethod]
        public void LoginShouldRedirectToHomeWithProperCultureWhenNoReturnUrlPresentAndMoreThanOneCultureIsAvailable()
        {
            var mock = new AccountControllerMock();
            mock.AuthenticationService.Setup(s => s.LogOn("Test", "Test")).Returns(new LoginUserResult { Success = true, PreferredCulture = "en" });
            var result = mock.AccountController.Login(new LoginViewModel { Email = "Test", Password = "Test" }) as RedirectToRouteResult;
            Assert.IsNotNull(result);
            Assert.AreEqual(string.Empty, result.RouteValues["area"]);
            Assert.AreEqual("en", result.RouteValues[PlatformConstants.LANGUAGE]);
            Assert.AreEqual("Home", result.RouteValues["controller"]);
            Assert.AreEqual(MvcConstants.INDEX, result.RouteValues["action"]);
        }

        [TestMethod]
        public void LoginShouldReturnViewWithErrorMessageWhenLoginFailed()
        {
            var mock = new AccountControllerMock();
            mock.AuthenticationService.Setup(s => s.LogOn("Test", "Test")).Returns(new LoginUserResult { Success = false, Message = Resources.Interface.InvalidCredentials });
            var result = mock.AccountController.Login(new LoginViewModel { Email = "Test", Password = "Test" }) as ViewResult;
            Assert.IsNotNull(result);
            Assert.AreEqual(Resources.Interface.InvalidCredentials, result.ViewBag.LoginError);
            Assert.AreEqual(Resources.Interface.LoginFailedContainer, result.ViewData.ModelState[string.Empty].Errors.First().ErrorMessage);
        }

        #endregion

        #region Register

        [TestMethod]
        public void SuccessfullyRegisteringWhenSelfRegistrationIsEnabledShouldReturnRedirectToSuccessPage()
        {
            var mock = new AccountControllerMock();
            mock.AccountServiceMock.Setup(s => s.RegisterAccount(It.IsAny<RegisterViewModel>())).Returns(new SaveResult<UserViewModel> { Success = true });
            var result = mock.AccountController.Register(new RegisterViewModel { Name = "Test", Email = "Test", AcceptedTerms = true }) as RedirectToRouteResult;
            Assert.IsNotNull(result);
            Assert.AreEqual("RegisterSuccess", result.RouteValues["action"]);
        }

        [TestMethod]
        public void SuccessfullyRegisteringWhenSelfRegistrationIsEnabledButMailFailsShouldReturnViewWithMailError()
        {
            var mock = new AccountControllerMock();
            mock.AccountServiceMock.Setup(s => s.RegisterAccount(It.IsAny<RegisterViewModel>())).Returns(new SaveResult<UserViewModel> { Success = true, Message = Resources.Interface.ErrorSendingVerificationMail });
            var result = mock.AccountController.Register(new RegisterViewModel { Name = "Test", Email = "Test", AcceptedTerms = true }) as ViewResult;
            Assert.IsNotNull(result);
            Assert.AreEqual(Resources.Interface.ErrorSendingVerificationMail, result.ViewData.ModelState[string.Empty].Errors.First().ErrorMessage);
        }

        [TestMethod]
        public void FailingToRegisteringWhenSelfRegistrationIsEnabledShouldReturnViewWithRegistrationError()
        {
            var mock = new AccountControllerMock();
            mock.AccountServiceMock.Setup(s => s.RegisterAccount(It.IsAny<RegisterViewModel>())).Returns(new SaveResult<UserViewModel> { Success = false, Message = Resources.Interface.ErrorRegisteringUser });
            var result = mock.AccountController.Register(new RegisterViewModel { Name = "Test", Email = "Test", AcceptedTerms = true }) as ViewResult;
            Assert.IsNotNull(result);
            Assert.AreEqual(Resources.Interface.ErrorRegisteringUser, result.ViewData.ModelState[string.Empty].Errors.First().ErrorMessage);
        }

        #endregion

        #region Password Reset

        [TestMethod]
        public void SetPasswordWithInvalidVerificationIdInKeyShouldShowErrorMessage()
        {
            var mock = new AccountControllerMock();
            var verificationId = Guid.NewGuid();
            mock.AccountServiceMock.Setup(s => s.GetUserByResetKey(verificationId)).Returns(MembershipTestData.DivingManager.Map<UserViewModel>());
            var key = verificationId;
            var result = mock.AccountController.SetPassword(key) as ViewResult;
            Assert.IsNotNull(result);
            var model = result.Model;
            mock.AccountServiceMock.Verify(s => s.GetUserByResetKey(verificationId), Times.Once());
            Assert.AreEqual(verificationId, ((SetPasswordViewModel)model).PasswordResetKey);
        }

        [TestMethod]
        public void SetPasswordIfNotAuthenticatedWithoutResetKeyShouldReturnNull()
        {
            var mock = new AccountControllerMock();
            var result = mock.AccountController.SetPassword(new SetPasswordViewModel { NewPassword = "Test", ConfirmPassword = "Test" });
            Assert.IsNull(result);
        }

        [TestMethod]
        public void SetPasswordWhenAuthenticatedShouldResetPasswordUsingOldPassword()
        {
            var mock = new AccountControllerMock();
            var user = MembershipTestData.GeneralManager;
            var environmentMock = new Mock<IEnvironment>();
            environmentMock.Setup(e => e.CurrentUserEmail).Returns(MembershipTestData.GeneralManager.Email);
            StrixPlatform.Environment = environmentMock.Object;
            mock.RequestMock.Setup(r => r.IsAuthenticated).Returns(true);
            mock.AccountServiceMock.Setup(m => m.ChangePassword(user.Email, MembershipTestData.GeneralManagerSecurity.Password, "Test", It.IsAny<Guid?>())).Returns(new SaveResult<UserViewModel> { Success = true });
            var result = mock.AccountController.SetPassword(new SetPasswordViewModel { OldPassword = MembershipTestData.GeneralManagerSecurity.Password, NewPassword = "Test", ConfirmPassword = "Test" });
            mock.AccountServiceMock.Verify(m => m.ChangePassword(user.Email, MembershipTestData.GeneralManagerSecurity.Password, "Test", It.IsAny<Guid?>()), Times.Once());
        }

        [TestMethod]
        public void SetPasswordWhenNotAuthenticatedShouldResetPasswordUsingResetKey()
        {
            var mock = new AccountControllerMock();
            var user = MembershipTestData.GeneralManager;
            var resetKey = Guid.NewGuid();
            mock.AccountServiceMock.Setup(u => u.GetUserByResetKey(resetKey)).Returns(user.Map<UserViewModel>());
            mock.AccountServiceMock.Setup(m => m.ChangePassword(user.Email, null, "Test", It.IsAny<Guid?>())).Returns(new SaveResult<UserViewModel> { Success = true });
            var result = mock.AccountController.SetPassword(new SetPasswordViewModel { NewPassword = "Test", ConfirmPassword = "Test", PasswordResetKey = resetKey });
            mock.AccountServiceMock.Verify(m => m.ChangePassword(user.Email, null, "Test", resetKey), Times.Once());
        }

        #endregion
    }
}
